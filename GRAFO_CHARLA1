<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grafos de la Charla</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
        }
        svg {
            border: 1px solid #ccc;
            margin: 20px auto;
            display: block;
        }
        h2 {
            text-align: center;
            color: #555;
        }
    </style>
</head>
<body>
    <h1 style="text-align: center;">Grafos de la Charla</h1>

    <!-- Contenedor para Grafo 1 -->
    <h2>Grafo de Conceptos Principales</h2>
    <svg id="grafo1" width="800" height="600"></svg>

    <!-- Contenedor para Grafo 2 -->
    <h2>Grafo de Ejemplos Prácticos</h2>
    <svg id="grafo2" width="800" height="600"></svg>

    <!-- Contenedor para Grafo 3 -->
    <h2>Grafo de Riesgos y Reflexiones Éticas</h2>
    <svg id="grafo3" width="800" height="600"></svg>

    <script>
        // Grafo 1: Conceptos Principales
        const grafo1 = {
            nodes: [
                { id: "Transformación Digital" },
                { id: "Inteligencia Artificial" },
                { id: "Big Data" },
                { id: "Ética" },
                { id: "Negocios" },
                { id: "Educación" },
                { id: "Salud" }
            ],
            links: [
                { source: "Transformación Digital", target: "Inteligencia Artificial" },
                { source: "Transformación Digital", target: "Big Data" },
                { source: "Inteligencia Artificial", target: "Negocios" },
                { source: "Inteligencia Artificial", target: "Educación" },
                { source: "Inteligencia Artificial", target: "Salud" },
                { source: "Big Data", target: "Negocios" },
                { source: "Big Data", target: "Ética" },
                { source: "Ética", target: "Salud" },
                { source: "Ética", target: "Negocios" }
            ]
        };

        renderGrafo("#grafo1", grafo1);

        // Grafo 2: Ejemplos Prácticos
        const grafo2 = {
            nodes: [
                { id: "Negocios" },
                { id: "Educación" },
                { id: "Salud" },
                { id: "Optimización de ventas" },
                { id: "Inventarios" },
                { id: "Jornada laboral" },
                { id: "Uso de ChatGPT" },
                { id: "Creatividad en tareas" },
                { id: "Modelos predictivos" },
                { id: "Consultas prenatales" }
            ],
            links: [
                { source: "Negocios", target: "Optimización de ventas" },
                { source: "Negocios", target: "Inventarios" },
                { source: "Negocios", target: "Jornada laboral" },
                { source: "Educación", target: "Uso de ChatGPT" },
                { source: "Educación", target: "Creatividad en tareas" },
                { source: "Salud", target: "Modelos predictivos" },
                { source: "Salud", target: "Consultas prenatales" }
            ]
        };

        renderGrafo("#grafo2", grafo2);

        // Grafo 3: Riesgos y Reflexiones Éticas
        const grafo3 = {
            nodes: [
                { id: "Privacidad" },
                { id: "Ciberseguridad" },
                { id: "Manipulación" },
                { id: "Ética" },
                { id: "Big Data" },
                { id: "Inteligencia Artificial" }
            ],
            links: [
                { source: "Privacidad", target: "Big Data" },
                { source: "Privacidad", target: "Inteligencia Artificial" },
                { source: "Ciberseguridad", target: "Big Data" },
                { source: "Manipulación", target: "Inteligencia Artificial" },
                { source: "Manipulación", target: "Ética" },
                { source: "Ética", target: "Big Data" }
            ]
        };

        renderGrafo("#grafo3", grafo3);

        // Función para renderizar los grafos
        function renderGrafo(selector, data) {
            const svg = d3.select(selector);
            const width = +svg.attr("width");
            const height = +svg.attr("height");

            const simulation = d3.forceSimulation(data.nodes)
                .force("link", d3.forceLink(data.links).id(d => d.id).distance(150))
                .force("charge", d3.forceManyBody().strength(-400))
                .force("center", d3.forceCenter(width / 2, height / 2));

            const link = svg.append("g")
                .attr("stroke", "#999")
                .attr("stroke-opacity", 0.6)
                .selectAll("line")
                .data(data.links)
                .join("line")
                .attr("stroke-width", 2);

            const node = svg.append("g")
                .attr("stroke", "#fff")
                .attr("stroke-width", 1.5)
                .selectAll("circle")
                .data(data.nodes)
                .join("circle")
                .attr("r", 10)
                .attr("fill", "skyblue")
                .call(drag(simulation));

            node.append("title").text(d => d.id);

            simulation.on("tick", () => {
                link
                    .attr("x1", d => d.source.x)
                    .attr("y1", d => d.source.y)
                    .attr("x2", d => d.target.x)
                    .attr("y2", d => d.target.y);

                node
                    .attr("cx", d => d.x)
                    .attr("cy", d => d.y);
            });

            function drag(simulation) {
                return d3.drag()
                    .on("start", event => {
                        if (!event.active) simulation.alphaTarget(0.3).restart();
                        event.subject.fx = event.subject.x;
                        event.subject.fy = event.subject.y;
                    })
                    .on("drag", event => {
                        event.subject.fx = event.x;
                        event.subject.fy = event.y;
                    })
                    .on("end", event => {
                        if (!event.active) simulation.alphaTarget(0);
                        event.subject.fx = null;
                        event.subject.fy = null;
                    });
            }
        }
    </script>
</body>
</html>
